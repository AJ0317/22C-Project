//  Created by Frank M. Carrano and Tim Henry.
//  Copyright (c) 2013 __Pearson Education__. All rights reserved.

#include <iostream>
#include <string>
#include "LinkedGraph.h"
#include "ArrayStack.h"
#include <fstream>
#include <Windows.h>
using namespace std;

// manipulation functions (add/remove/search/)
void addNetworkLine();
void removeNetworkLine();
void undoPreRemoval();
void calcLeastCost();

// display Functions
void displayOffice();
void displayGraph();
void writeGraph(ofstream &outputFile);
bool openOutputFile(ofstream &outputFile);

bool openInputFile(ifstream &ifs)
{
	string filename;
	cout << "Enter the input filename: ";
	getline(cin, filename);
	ifs.open(filename.c_str()); //if input matches filename then open
	return ifs.is_open();
}

char getOption()
{
	char option;

	cout << "============== Command Menu =================\n\n";

	cout << "Enter T to display total number of offices." << endl;
	cout << "Enter A to add one additional network line." << endl;
	cout << "Enter R to remove existing network line." << endl;
	cout << "Enter U to undo previous removal." << endl;
	cout << "Enter C to calculate the least cost of network lines." << endl;
	cout << "Enter D to display graph to the screen." << endl;
	//cout << "Enter O to output graph into text file." << endl; //moving this to be part of option D.
	cout << "Enter Q to quit." << endl;

	cout << "=============================================\n\n";

	cout << "Enter your choice: ";
	cin >> option;
	cout << endl;

	return option;
}

void menu(ifstream &inFile, ofstream &outputFile)
{
	cout << "============== Main Menu ===============\n\n";

	/*//---------------open file-------------------
	do
	{
		openInputFile(inFile);
	} while (!openInputFile(inFile));

	cout << "Successfully opened file." << endl;

	//---------------input file-------------------
	cout << "Start to input file";

	for (int i = 0; i < 3; i++)
	{
		cout << "."; Sleep(500);
	}

	cout << "Finished input." << endl;


	string office;
	double cost;
	ArrayStack<string> officeStack;
	ArrayStack<double> edgeStack;

	while (inFile >> office >> cost)
	{
		officeStack.push(office);
		edgeStack.push(cost);
	}*/



	//----------------sub menu-------------------
	char option;
	
	do{
		option = getOption();

		switch (option)
		{
			case 'T': //displayOffice(); break;
			case 'A': //addNetworkLine(); break;
			case 'R': //removeNetworkLine(); break;
			case 'U': //undoPreRemoval(); break;
			case 'C': //calcLeastCost(); break;
			case 'D': //displayGraph(); break;
			//case 'O': //outputGraph(); break;
			case 'Q': cout << "End of program." << endl;
				break;
			default: cout << "Invalid entry." << endl;
		}

	} while (option != 'Q');

}

int main()
{

	system("pause");
	return 0;
}

void addNetworkLine(){
	// graphInterface add
	//do 
	cout << "The offices that currently exist are " << endl;
	// call list of current offices that exist
	cout << "Enter the office to add a line from" << endl;
	//cin >> start of vertex
	cout << "Enter the office to connect to" << endl;
	// cin >> end of vertex
	// check cases
	// if (already connected)
	// cout << "the office has already been connected to eachother"
	// loop ask again what the user want to connect to and from.
	// decision = false
	// if (not connected but offices exist)
	// cout << "Enter the cost of the network line: "
	// cin >> cost (the weight of the edge) 
	// call add function (start, end, weight)"
	// cout << "The network line of Office x(start) to office y(end) cost (user entered weight) "
	// exit loop somehow    
	// decision = true
	// if (not connected but office dosent exist)
	// creates vertices and add to graph
	// ???
	// decision = false


	//while (decision = false)        // decision = when the new office line has been connected 

}

void removeNetworkLine(){
	cout << "The offices that currently exist are " << endl;
	// call list of current offices that exist
	cout << "Enter the office to remove a line from" << endl;
	//cin >> start of vertex
	cout << "Enter the office to remove to" << endl;
	// cin >> end of vertex
}

void undoPreRemoval(){
	// if graph->isEmpty()){ cout << "Nothing to remove from network" << endl; return;
}

void calcLeastCost(){

	cout << "The most efficient network line is ";
	// get list of offices from least to greatest edge cost
	cout << "For a total cost of " << /*get sum of cost*/ << endl;

}

void displayOffice(){
	cout << "The amount of Offices in the network is " << endl;

}

void displayGraph(){


	// Cout << The most cost efficient network line is connecting the offices in this order" << endl;
	// call write Vector function in prim

	char option;
	cout << "How would you like to display the graph? (Enter D or B) \n   D. Depth-First traversal or B. Breath-firstTraversal" << endl;
	cin >> option;

	switch (toupper(option)){
	case 'D':
		// if(depthFirstTraversal is empty) cout << "There is nothing to display << endl;
		// else display depthFirstTraversal
		break;
	case 'B':
		// if (breathFirstTraversal is empty) cout <<"Nothing to display" << endl;
		// else display breathFirstTraversal
		break;
	default: cout << "Invalid Entry" << endl;
	}

	// cout << "Would you like to save the results to a text file? << endl;
	// cout << "Enter Y for yes, N for no   ";
	// char option 
	//cin >> option; 
	// while (option != 'n' || option != 'N'){
	// writeGraph();
	//}

}

void writeGraph(ofstream &outputFile){
	ofstream of;
	bool openOutputFile(ofstream &of);
	if (openOutputFile(of) == false){
		cout << "Invalid Outputfile Name\n";
		return 1;
	}
	else
		cout << "Output successfully written to file!" << endl;
	outputFile << endl;
}

bool openOutputFile(ofstream &outputFile){
	string outputFileName;
	cout << "Enter output filename: ";
	getline(cin, outputFileName);
	outputFile.open(outputFileName.c_str());
	if (outputFile.fail()){
		return false;
	}
	else return true;
}
